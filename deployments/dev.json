{
  "ValidatorSet": {
    "address": "0x1fEf4FA0e0a5988F02Ba11786c91d25e0d352eEA",
    "abi": [
      "event Initialized(uint8 version)",
      "event InitiateChange(bytes32 indexed parentHash, address[] newSet)",
      "event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)",
      "event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)",
      "event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)",
      "event ValidatorSetFinalized(address[] newSet)",
      "function DEFAULT_ADMIN_ROLE() view returns (bytes32)",
      "function REWARD_ORACLE_ROLE() view returns (bytes32)",
      "function STAKING_MANAGER_ROLE() view returns (bytes32)",
      "function addBlockListener(address listener)",
      "function addStake(address nodeAddress, uint256 amount)",
      "function baseReward() view returns (uint256)",
      "function changeTopStakesCount(uint256 newTopStakesCount)",
      "function finalizeChange()",
      "function getNodeStake(address nodeAddress) view returns (uint256)",
      "function getQueuedStakes() view returns (address[])",
      "function getRoleAdmin(bytes32 role) view returns (bytes32)",
      "function getTopStakes() view returns (address[])",
      "function getValidators() view returns (address[])",
      "function grantRole(bytes32 role, address account)",
      "function hasRole(bytes32 role, address account) view returns (bool)",
      "function initialize(address _multisig, address _rewardOracle, uint256 _baseReward, uint256 _topStakesCount)",
      "function isCalledBySuperUser() view returns (bool)",
      "function removeBlockListener(address listener)",
      "function removeStake(address nodeAddress, uint256 amount)",
      "function renounceRole(bytes32 role, address account)",
      "function revokeRole(bytes32 role, address account)",
      "function reward(address[] beneficiaries, uint16[] kind) returns (address[], uint256[])",
      "function setReward(uint256 _baseReward)",
      "function stakes(address) view returns (uint256 amount, address stakingContract, bool isAlwaysTop)",
      "function supportsInterface(bytes4 interfaceId) view returns (bool)",
      "function topStakesCount() view returns (uint256)",
      "function totalStakeAmount() view returns (uint256)"
    ],
    "deployTx": "0x848ebdd6cc2cd013c1c0d58a67ed78f4992bcafb8d88bbdd4d07c115e3c25de7",
    "fullyQualifiedName": "contracts/consensus/ValidatorSet.sol:ValidatorSet",
    "proxy": {
      "implementation": "0x7aE1eAFC7a9b106b392ddEE027449b09dbDE1347",
      "fullyQualifiedName": "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol:TransparentUpgradeableProxy"
    }
  },
  "MasterMultisig": {
    "address": "0xD11a85386e3C5Cc493A1440Ef7Fd99BFAF72477d",
    "abi": [
      "constructor(address[] _signers, bool[] isInitiatorFlags, uint256 _threshold)",
      "event Confirmation(address indexed sender, uint256 indexed txId)",
      "event Execution(uint256 indexed txId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Revocation(address indexed sender, uint256 indexed txId)",
      "event SignerAddition(address indexed signer, bool isInitiator)",
      "event SignerRemoval(address indexed signer)",
      "event Submission(uint256 indexed txId)",
      "event ThresholdChange(uint256 required)",
      "function changeOwners(address[] multisigs, address newOwner)",
      "function changeSigners(address[] signersToRemove, address[] signersToAdd, bool[] isInitiatorFlags)",
      "function changeSignersMaster(tuple(address contract_, address[] signersToRemove, address[] signersToAdd, bool[] isInitiatorFlags)[] changes)",
      "function changeThreshold(uint256 _threshold)",
      "function checkBeforeSubmitTransaction(address destination, uint256 value, bytes data) payable",
      "function confirmTransaction(uint256 txId)",
      "function confirmations(uint256, address) view returns (bool)",
      "function getAllSigners(address[] multisigs) view returns (tuple(address[] signers, bool[] isInitiatorFlags, uint256 threshold)[])",
      "function getConfirmations(uint256 txId) view returns (address[])",
      "function getInitiatorsCount() view returns (uint256)",
      "function getRequiredSignersCount() view returns (uint256)",
      "function getSigners() view returns (address[], bool[])",
      "function getTransactionData(uint256 txId) view returns (tuple(address destination, uint256 value, bytes data, bool executed), address[])",
      "function getTransactionIds(uint256 from, uint256 to, bool pending, bool executed) view returns (uint256[] result)",
      "function isConfirmed(uint256 txId) view returns (bool)",
      "function isInitiator(address) view returns (bool)",
      "function isSigner(address) view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function revokeConfirmation(uint256 txId)",
      "function signers(uint256) view returns (address)",
      "function submitTransaction(address destination, uint256 value, bytes data) payable returns (uint256 txId)",
      "function threshold() view returns (uint256)",
      "function transactionCount() view returns (uint256)",
      "function transactions(uint256) view returns (address destination, uint256 value, bytes data, bool executed)",
      "function transferOwnership(address newOwner)",
      "function withdraw(address to, uint256 amount)"
    ],
    "deployTx": "0x071ab6c2d0bc79abb91bd5c2e4f2ce4d13b3de9b8758a2124c343eebad4b4f2b",
    "fullyQualifiedName": "contracts/multisig/MasterMultisig.sol:MasterMultisig"
  },
  "LegacyPoolManager_Multisig": {
    "address": "0xD3A7E420Aa128Cb6AcFDd998258Ea938E50Ae600",
    "abi": [
      "constructor(address[] _signers, bool[] isInitiatorFlags, uint256 _threshold, address owner)",
      "event Confirmation(address indexed sender, uint256 indexed txId)",
      "event Execution(uint256 indexed txId)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event Revocation(address indexed sender, uint256 indexed txId)",
      "event SignerAddition(address indexed signer, bool isInitiator)",
      "event SignerRemoval(address indexed signer)",
      "event Submission(uint256 indexed txId)",
      "event ThresholdChange(uint256 required)",
      "function changeSigners(address[] signersToRemove, address[] signersToAdd, bool[] isInitiatorFlags)",
      "function changeThreshold(uint256 _threshold)",
      "function checkBeforeSubmitTransaction(address destination, uint256 value, bytes data) payable",
      "function confirmTransaction(uint256 txId)",
      "function confirmations(uint256, address) view returns (bool)",
      "function getConfirmations(uint256 txId) view returns (address[])",
      "function getInitiatorsCount() view returns (uint256)",
      "function getRequiredSignersCount() view returns (uint256)",
      "function getSigners() view returns (address[], bool[])",
      "function getTransactionData(uint256 txId) view returns (tuple(address destination, uint256 value, bytes data, bool executed), address[])",
      "function getTransactionIds(uint256 from, uint256 to, bool pending, bool executed) view returns (uint256[] result)",
      "function isConfirmed(uint256 txId) view returns (bool)",
      "function isInitiator(address) view returns (bool)",
      "function isSigner(address) view returns (bool)",
      "function owner() view returns (address)",
      "function renounceOwnership()",
      "function revokeConfirmation(uint256 txId)",
      "function signers(uint256) view returns (address)",
      "function submitTransaction(address destination, uint256 value, bytes data) payable returns (uint256 txId)",
      "function threshold() view returns (uint256)",
      "function transactionCount() view returns (uint256)",
      "function transactions(uint256) view returns (address destination, uint256 value, bytes data, bool executed)",
      "function transferOwnership(address newOwner)",
      "function withdraw(address to, uint256 amount)"
    ],
    "deployTx": "0xeb6de2e457b5aae26c00848b98461c3a3d468da5f12c1ccae3a0000dd1899cc2",
    "fullyQualifiedName": "contracts/multisig/Multisig.sol:Multisig"
  },
  "LegacyPoolManager": {
    "address": "0x51781501C27a7D6503652CA280BF5e92F3Eb03CD",
    "abi": [
      "constructor(uint256 minApolloDeposit_, address validatorSet_, address _poolsStore, address _apolloDepositStore, address _rolesEventEmitter, address _poolEventsEmitter)",
      "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "event PoolAdded(address poolAddress)",
      "event PoolRemoved(address poolAddress)",
      "function addNodeRequest(uint256 stake, uint256 requestId, uint256 nodeId, uint8 role)",
      "function addNodeRequestResolved(uint256 requestId, uint256 status)",
      "function addPool(address pool)",
      "function changeMinApolloDeposit(uint256 newMinApolloDeposit)",
      "function getDeposit(address nodeAddress) view returns (uint256)",
      "function importOldStakes(address[] addresses, uint256[] amounts)",
      "function isPool(address poolAddress) view returns (bool)",
      "function minApolloDeposit() view returns (uint256)",
      "function nextId() returns (uint256)",
      "function onboard(address nodeAddress, uint8 nodeType) payable",
      "function owner() view returns (address)",
      "function poolReward(uint256 reward, uint256 tokenPrice)",
      "function poolStakeChanged(address user, int256 stake, int256 tokens)",
      "function removePool(address pool)",
      "function renounceOwnership()",
      "function report(address nodeAddress)",
      "function retire(address nodeAddress, uint8 nodeType) returns (uint256)",
      "function reward(address nodeAddress, uint256 amount)",
      "function transferOwnership(address newOwner)",
      "function validatorSet() view returns (address)"
    ],
    "deployTx": "0x9c68f54093c1ec0f2280c45733e4fe21badf90161c9bc0a5f90dbef05ae6cb33",
    "fullyQualifiedName": "contracts/staking/pools/LegacyPoolsNodes_Manager.sol:LegacyPoolsNodes_Manager"
  }
}